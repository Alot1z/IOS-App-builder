name: Build TrollStore Enhanced

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug
      ios_version:
        description: 'iOS Target Version'
        required: true
        default: '17.0'
        type: string

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  THEOS: ${{ github.workspace }}/theos

jobs:
  build:
    name: Build TrollStore Enhanced
    runs-on: macos-latest
    
    env:
      THEOS_DEVICE_IP: 127.0.0.1
      THEOS_DEVICE_PORT: 22
      SDK_VERSION: ${{ github.event.inputs.ios_version || '17.0' }}
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'release' }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Build Environment
      run: |
        echo "Setting up build environment..."
        sudo xcode-select --switch /Applications/Xcode.app
        
        # Install core dependencies
        brew install \
          ldid \
          dpkg \
          xz \
          cmake \
          ninja \
          wget \
          curl \
          libarchive \
          make || true
          
        # Install LLVM
        brew install llvm || true
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
        
    - name: Setup Theos
      run: |
        echo "Setting up Theos..."
        git clone --recursive https://github.com/theos/theos.git $THEOS
        
        echo "Downloading SDKs..."
        curl -LO https://github.com/theos/sdks/archive/master.zip
        unzip master.zip -d $THEOS/sdks
        mv $THEOS/sdks/sdks-master/*.sdk $THEOS/sdks/
        rm -rf master.zip $THEOS/sdks/sdks-master
        
        echo "Configuring Theos..."
        export THEOS_DEVICE_IP=$THEOS_DEVICE_IP
        export THEOS_DEVICE_PORT=$THEOS_DEVICE_PORT
        
    - name: Build insert_dylib
      run: |
        echo "Building insert_dylib..."
        git clone https://github.com/pwn20wndstuff/insert_dylib
        cd insert_dylib
        xcodebuild -configuration Release
        sudo cp build/Release/insert_dylib /usr/local/bin/
        cd ..
        rm -rf insert_dylib
        
    - name: Build TrollStore Core
      run: |
        echo "Building TrollStore core..."
        echo "Build type: ${{ env.BUILD_TYPE }}"
        echo "iOS target: ${{ env.SDK_VERSION }}"
        
        # Ensure correct permissions
        chmod -R 755 .
        
        if [ "${{ env.BUILD_TYPE }}" = "debug" ]; then
          echo "Building debug version..."
          make package DEBUG=1 FINALPACKAGE=0
        else
          echo "Building release version..."
          make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless
        fi
        
    - name: Process Binaries
      run: |
        echo "Processing binaries..."
        cd packages
        for deb in *.deb; do
          echo "Processing $deb..."
          dpkg-deb -R "$deb" extracted
          
          # Setup payload structure
          mkdir -p Payload/TrollStore.app
          
          # Copy application files
          cp -r extracted/Applications/* Payload/ || true
          cp -r extracted/Library Payload/TrollStore.app/ || true
          
          # Insert dylib with proper error handling
          if [ -f "Payload/TrollStore.app/TrollStore" ]; then
            echo "Inserting dylib..."
            insert_dylib --all-yes "@executable_path/TrollStore" Payload/TrollStore.app/TrollStore || {
              echo "Failed to insert dylib, retrying with sudo..."
              sudo insert_dylib --all-yes "@executable_path/TrollStore" Payload/TrollStore.app/TrollStore
            }
          fi
          
          # Create and sign IPA
          echo "Creating IPA..."
          zip -r "${deb%.*}.ipa" Payload
          echo "Signing IPA..."
          ldid -S../entitlements.plist "${deb%.*}.ipa"
          
          # Cleanup
          rm -rf extracted Payload
        done
        
    - name: Verify Build
      run: |
        echo "Verifying build artifacts..."
        ls -la packages/
        file packages/*.ipa || echo "No IPA files found"
        file packages/*.deb || echo "No DEB files found"
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TrollStoreEnhanced-${{ env.BUILD_TYPE }}
        path: |
          packages/*.ipa
          packages/*.deb
        if-no-files-found: error
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          packages/*.ipa
          packages/*.deb
        name: TrollStore Enhanced ${{ github.sha }}
        tag_name: v${{ github.run_number }}
        body: |
          TrollStore Enhanced Build ${{ github.sha }}
          
          Build Information:
          - Type: ${{ env.BUILD_TYPE }}
          - iOS Target: ${{ env.SDK_VERSION }}
          - Build Number: ${{ github.run_number }}
          
          Features:
          - Full iOS ${{ env.SDK_VERSION }} Support
          - Enhanced Security Features
          - Improved Performance
          - Extended System Integration
          - Advanced Entitlements
          
          Installation:
          1. Download TrollStoreEnhanced.ipa
          2. Install using TrollStore
          3. Grant required permissions
          
          Note: This build includes all system integrations and advanced features
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
