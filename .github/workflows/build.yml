name: Build iOS Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode_15.4.app/Contents/Developer
  SDKROOT: /Applications/Xcode_15.4.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS17.5.sdk

jobs:
  build-lightnovelpub:
    name: Build LightNovelPub
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Setup Xcode
      uses: maxim/setup-xcode@v1
      with:
        xcode-version: '15.4'
    
    - name: Install Dependencies
      run: |
        brew install imagemagick
        brew install swiftlint
        brew install create-dmg
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Install Fastlane
      run: |
        gem install fastlane
        gem install cocoapods
    
    - name: Setup Build Environment
      run: |
        cd Apps/lightnovelpub
        mkdir -p build/{release,logs,debug-symbols}
        mkdir -p build/DerivedData/{Build/Intermediates.noindex,Build/Products}
    
    - name: Generate App Icons
      run: |
        cd Apps/lightnovelpub
        chmod +x scripts/generate_icons.sh
        ./scripts/generate_icons.sh assets/icon.png
    
    - name: Run SwiftLint
      run: |
        cd Apps/lightnovelpub
        swiftlint lint --reporter github-actions-logging
    
    - name: Build App
      run: |
        cd Apps/lightnovelpub
        chmod +x scripts/build.sh
        ./scripts/build.sh \
          --ios-version "17.0" \
          --app-version "1.0.0" \
          --min-ios-version "16.0" \
          --max-ios-version "17.0" \
          --optimization-level 3 \
          --enable-bitcode false \
          --enable-arc true \
          --deployment-target "16.0" \
          --build-type "release" \
          --root-enabled false \
          --exploit-enabled false
    
    - name: Run Tests
      run: |
        cd Apps/lightnovelpub
        if [ -f "scripts/test.sh" ]; then
          chmod +x scripts/test.sh
          ./scripts/test.sh
        fi
    
    - name: Create IPA
      run: |
        cd Apps/lightnovelpub/build
        mkdir -p Payload
        cp -r release/LightNovelPub.app Payload/
        zip -r LightNovelPub.ipa Payload
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: LightNovelPub
        path: |
          Apps/lightnovelpub/build/LightNovelPub.ipa
          Apps/lightnovelpub/build/debug-symbols/
          Apps/lightnovelpub/build/logs/
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Apps/lightnovelpub/build/LightNovelPub.ipa
        name: Release ${{ github.ref_name }}
        body_path: Apps/lightnovelpub/CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup
      if: always()
      run: |
        cd Apps/lightnovelpub
        rm -rf build/DerivedData
        rm -rf build/Intermediates.noindex

  build-android-emulator:
    name: Build Android Emulator
    runs-on: macos-latest
    needs: build-lightnovelpub
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Setup Xcode
      uses: maxim/setup-xcode@v1
      with:
        xcode-version: '15.4'
    
    - name: Install Dependencies
      run: |
        brew install imagemagick
        brew install swiftlint
        brew install create-dmg
    
    - name: Setup Build Environment
      run: |
        cd Apps/AndroidEmulator
        mkdir -p build/{release,logs,debug-symbols}
        mkdir -p build/DerivedData/{Build/Intermediates.noindex,Build/Products}
    
    - name: Generate App Icons
      run: |
        cd Apps/AndroidEmulator
        if [ -f "scripts/generate_icons.sh" ]; then
          chmod +x scripts/generate_icons.sh
          ./scripts/generate_icons.sh assets/icon.png
        fi
    
    - name: Run SwiftLint
      run: |
        cd Apps/AndroidEmulator
        swiftlint lint --reporter github-actions-logging
    
    - name: Build Emulator
      run: |
        cd Apps/AndroidEmulator
        chmod +x scripts/build.sh
        ./scripts/build.sh \
          --ios-version "17.0" \
          --app-version "1.0.0" \
          --min-ios-version "16.0" \
          --max-ios-version "17.0" \
          --optimization-level 3 \
          --enable-bitcode false \
          --enable-arc true \
          --deployment-target "16.0" \
          --build-type "release"
    
    - name: Run Tests
      run: |
        cd Apps/AndroidEmulator
        if [ -f "scripts/test.sh" ]; then
          chmod +x scripts/test.sh
          ./scripts/test.sh
        fi
    
    - name: Create IPA
      run: |
        cd Apps/AndroidEmulator/build
        mkdir -p Payload
        cp -r release/AndroidEmulator.app Payload/
        zip -r AndroidEmulator.ipa Payload
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: AndroidEmulator
        path: |
          Apps/AndroidEmulator/build/AndroidEmulator.ipa
          Apps/AndroidEmulator/build/debug-symbols/
          Apps/AndroidEmulator/build/logs/
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Apps/AndroidEmulator/build/AndroidEmulator.ipa
        name: Release ${{ github.ref_name }}
        body_path: Apps/AndroidEmulator/CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup
      if: always()
      run: |
        cd Apps/AndroidEmulator
        rm -rf build/DerivedData
        rm -rf build/Intermediates.noindex
